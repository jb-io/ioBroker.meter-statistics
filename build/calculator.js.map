{
  "version": 3,
  "sources": ["../src/calculator.ts"],
  "sourcesContent": ["import {CalculatorConfig, MeterDefinition, MeterInfo, MeterInfoCollection, MeterState} from './lib/typedef';\nimport Period from './period';\n\nexport default class Calculator {\n\n    private readonly summaryName: string;\n\n    private readonly config: CalculatorConfig;\n    private readonly period: Period;\n\n    constructor(config: CalculatorConfig) {\n        this.period = new Period();\n        this.config = config;\n        this.summaryName = config.summaryName;\n    }\n\n    private initMeterInfo(): MeterInfo {\n        return {\n            balance: 0,\n            consumptionAverage: 0,\n            consumptionPredictedTotal: 0,\n            consumptionTotal: 0,\n            costs: 0,\n            paid: 0,\n            recommendedPayment: 0,\n        };\n    }\n    public calculateMeterInfos(meterStates: MeterState[]): MeterInfoCollection\n    {\n        const summary = this.initMeterInfo();\n        const collection: MeterInfoCollection = {\n            [this.summaryName]: summary,\n        };\n\n        const meters: Array<{info: MeterInfo, state: MeterState, definition: MeterDefinition}> = [];\n\n        for (const state of meterStates) {\n            const info = this.initMeterInfo();\n\n            const definition = state.meter;\n            collection[definition.alias] = info;\n\n            meters.push({info, state, definition});\n        }\n\n        for (const {info, state} of meters) {\n            // TODO use period depending on state.startValueDateTime\n            // const startValueDateTime = state.startValueDateTime;\n            info.consumptionTotal = state.consumption;\n            info.consumptionAverage = this.period.calculateValuePerDay(state.consumption);\n            info.consumptionPredictedTotal = this.period.calculateExtrapolateValueForPeriod(state.consumption);\n\n            summary.consumptionTotal += info.consumptionTotal;\n            summary.consumptionAverage += info.consumptionAverage;\n            summary.consumptionPredictedTotal += info.consumptionPredictedTotal;\n        }\n\n        const basePrice = this.period.calculateElapsedAmountInPeriod(this.config.paymentBasePrice);\n        const paid = this.calculatePaid();\n        for (const {info, state, definition} of meters) {\n            const factor = info.consumptionTotal / summary.consumptionTotal;\n\n            info.costs = state.consumption * definition.pricePerUnit + basePrice * factor;\n            info.paid = paid * factor;\n            info.balance = info.paid - info.costs;\n            info.recommendedPayment = this.calculateRecommendation(info.costs);\n\n            summary.costs += info.costs;\n            summary.paid += info.paid;\n            summary.balance += info.balance;\n            summary.recommendedPayment += info.recommendedPayment;\n        }\n\n        return collection;\n    }\n\n\n    private calculatePaid(): number {\n        const config = this.config;\n        return config.paymentCorrectionOffset + this.period.calculateElapsedAmountInPeriod(config.paymentValue * config.paymentCount);\n    }\n\n    private calculateRecommendation(costs: number): number {\n        return this.period.calculateExtrapolateValueForPeriod(costs) / this.config.paymentCount;\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AAEnB,MAAO,WAAyB;AAAA,EAO5B,YAAY,QAA0B;AAClC,SAAK,SAAS,IAAI,cAAAA,QAAO;AACzB,SAAK,SAAS;AACd,SAAK,cAAc,OAAO;AAAA,EAC9B;AAAA,EAEQ,gBAA2B;AAC/B,WAAO;AAAA,MACH,SAAS;AAAA,MACT,oBAAoB;AAAA,MACpB,2BAA2B;AAAA,MAC3B,kBAAkB;AAAA,MAClB,OAAO;AAAA,MACP,MAAM;AAAA,MACN,oBAAoB;AAAA,IACxB;AAAA,EACJ;AAAA,EACO,oBAAoB,aAC3B;AACI,UAAM,UAAU,KAAK,cAAc;AACnC,UAAM,aAAkC;AAAA,MACpC,CAAC,KAAK,cAAc;AAAA,IACxB;AAEA,UAAM,SAAmF,CAAC;AAE1F,eAAW,SAAS,aAAa;AAC7B,YAAM,OAAO,KAAK,cAAc;AAEhC,YAAM,aAAa,MAAM;AACzB,iBAAW,WAAW,SAAS;AAE/B,aAAO,KAAK,EAAC,MAAM,OAAO,WAAU,CAAC;AAAA,IACzC;AAEA,eAAW,EAAC,MAAM,MAAK,KAAK,QAAQ;AAGhC,WAAK,mBAAmB,MAAM;AAC9B,WAAK,qBAAqB,KAAK,OAAO,qBAAqB,MAAM,WAAW;AAC5E,WAAK,4BAA4B,KAAK,OAAO,mCAAmC,MAAM,WAAW;AAEjG,cAAQ,oBAAoB,KAAK;AACjC,cAAQ,sBAAsB,KAAK;AACnC,cAAQ,6BAA6B,KAAK;AAAA,IAC9C;AAEA,UAAM,YAAY,KAAK,OAAO,+BAA+B,KAAK,OAAO,gBAAgB;AACzF,UAAM,OAAO,KAAK,cAAc;AAChC,eAAW,EAAC,MAAM,OAAO,WAAU,KAAK,QAAQ;AAC5C,YAAM,SAAS,KAAK,mBAAmB,QAAQ;AAE/C,WAAK,QAAQ,MAAM,cAAc,WAAW,eAAe,YAAY;AACvE,WAAK,OAAO,OAAO;AACnB,WAAK,UAAU,KAAK,OAAO,KAAK;AAChC,WAAK,qBAAqB,KAAK,wBAAwB,KAAK,KAAK;AAEjE,cAAQ,SAAS,KAAK;AACtB,cAAQ,QAAQ,KAAK;AACrB,cAAQ,WAAW,KAAK;AACxB,cAAQ,sBAAsB,KAAK;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAGQ,gBAAwB;AAC5B,UAAM,SAAS,KAAK;AACpB,WAAO,OAAO,0BAA0B,KAAK,OAAO,+BAA+B,OAAO,eAAe,OAAO,YAAY;AAAA,EAChI;AAAA,EAEQ,wBAAwB,OAAuB;AACnD,WAAO,KAAK,OAAO,mCAAmC,KAAK,IAAI,KAAK,OAAO;AAAA,EAC/E;AAEJ;",
  "names": ["Period"]
}
