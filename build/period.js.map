{
  "version": 3,
  "sources": ["../src/period.ts"],
  "sourcesContent": ["export default class Period {\n\n    private static now: null|Date;\n    private readonly perDayFactor: number;\n    private readonly extrapolatePerPeriodFactor: number;\n    private readonly elapsedInPeriodFactor: number;\n\n    constructor(startOfPeriod: Date|null = null) {\n        const now = this.now;\n\n        const periodStartDateTime = startOfPeriod || new Date(now.getFullYear(), 0, 0);\n        const periodEndDateTime = this.incrementDatetimeByOneYear(periodStartDateTime);\n\n        const periodStartTimestamp = periodStartDateTime.valueOf();\n        const periodEndTimestamp = periodEndDateTime.valueOf();\n\n        const unitsPerDay = (new Date('1900-01-02T00:00:00')).valueOf() - (new Date('1900-01-01T00:00:00')).valueOf();\n        const unitsInPeriod = periodEndTimestamp - periodStartTimestamp;\n        const elapsedUnitsInPeriod = now.valueOf() - periodStartTimestamp;\n\n        this.perDayFactor = 1 / elapsedUnitsInPeriod * unitsPerDay;\n        this.extrapolatePerPeriodFactor = 1 / elapsedUnitsInPeriod * unitsInPeriod;\n        this.elapsedInPeriodFactor = 1 / unitsInPeriod * elapsedUnitsInPeriod;\n    }\n\n    private get now(): Date {\n        if (!Period.now) {\n            Period.now = new Date();\n        }\n        return Period.now;\n    }\n\n    private incrementDatetimeByOneYear(date: Date): Date {\n        const newDate = new Date(date);\n        newDate.setFullYear(date.getFullYear() + 1);\n        return newDate;\n    }\n\n    public calculateValuePerDay(amountInPeriod: number): number {\n        return amountInPeriod * this.perDayFactor;\n    }\n\n    public calculateExtrapolateValueForPeriod(amountInPeriod: number): number {\n        return amountInPeriod * this.extrapolatePerPeriodFactor;\n    }\n\n    public calculateElapsedAmountInPeriod(totalAmountInYear: number): number {\n        return totalAmountInYear * this.elapsedInPeriodFactor;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAO,OAAqB;AAAA,EAOxB,YAAY,gBAA2B,MAAM;AACzC,UAAM,MAAM,KAAK;AAEjB,UAAM,sBAAsB,iBAAiB,IAAI,KAAK,IAAI,YAAY,GAAG,GAAG,CAAC;AAC7E,UAAM,oBAAoB,KAAK,2BAA2B,mBAAmB;AAE7E,UAAM,uBAAuB,oBAAoB,QAAQ;AACzD,UAAM,qBAAqB,kBAAkB,QAAQ;AAErD,UAAM,cAAe,IAAI,KAAK,qBAAqB,EAAG,QAAQ,IAAK,IAAI,KAAK,qBAAqB,EAAG,QAAQ;AAC5G,UAAM,gBAAgB,qBAAqB;AAC3C,UAAM,uBAAuB,IAAI,QAAQ,IAAI;AAE7C,SAAK,eAAe,IAAI,uBAAuB;AAC/C,SAAK,6BAA6B,IAAI,uBAAuB;AAC7D,SAAK,wBAAwB,IAAI,gBAAgB;AAAA,EACrD;AAAA,EAEA,IAAY,MAAY;AACpB,QAAI,CAAC,OAAO,KAAK;AACb,aAAO,MAAM,IAAI,KAAK;AAAA,IAC1B;AACA,WAAO,OAAO;AAAA,EAClB;AAAA,EAEQ,2BAA2B,MAAkB;AACjD,UAAM,UAAU,IAAI,KAAK,IAAI;AAC7B,YAAQ,YAAY,KAAK,YAAY,IAAI,CAAC;AAC1C,WAAO;AAAA,EACX;AAAA,EAEO,qBAAqB,gBAAgC;AACxD,WAAO,iBAAiB,KAAK;AAAA,EACjC;AAAA,EAEO,mCAAmC,gBAAgC;AACtE,WAAO,iBAAiB,KAAK;AAAA,EACjC;AAAA,EAEO,+BAA+B,mBAAmC;AACrE,WAAO,oBAAoB,KAAK;AAAA,EACpC;AACJ;",
  "names": []
}
