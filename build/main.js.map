{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport {DayInfo, MeterConsumption, MeterDefinition, MeterState} from './lib/typedef';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass MeterStatistics extends utils.Adapter {\n\n    private unloaded = false;\n\n    private pendingPromises: Array<Promise<any>> = [];\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'meter-statistics',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n\n        await this.assertObjectsExist();\n\n        const dayInfo = this.getDayInfo();\n        const meterStates = await this.getMeterStates();\n\n        const {total, average, predicted} = this.calculateMeterConsumption(meterStates, dayInfo);\n        this.writeState('summary.consumptionTotal', this.roundConsumption(total));\n        this.writeState('summary.consumptionAverage', this.roundConsumption(average));\n        this.writeState('summary.consumptionPredictedTotal', this.roundConsumption(predicted));\n\n        const costs = this.calculateCosts(meterStates, dayInfo);\n        this.writeState('summary.costs', this.roundCosts(costs));\n\n        const paid = this.calculatePaid(dayInfo);\n        this.writeState('summary.paid', this.roundCosts(paid));\n\n        const current = paid - costs;\n        this.writeState('summary.balance', this.roundCosts(current));\n\n        const recommendedPayment = this.calculateRecommendation(costs, dayInfo);\n        this.writeState('summary.recommendedPayment', this.roundCosts(recommendedPayment));\n\n        this.end();\n    }\n\n    private addPendingPromise(promise: Promise<any>): void {\n        this.pendingPromises.push(promise);\n    }\n\n    private calculateMeterConsumption(meterStates: MeterState[], dayInfo: DayInfo): MeterConsumption {\n\n        let totalConsumption = 0;\n\n        for (const meterState of meterStates) {\n            const meter = meterState.meter;\n            this.writeState(`meter.${meter.alias}.consumptionTotal`, this.roundConsumption(meterState.consumption));\n            this.writeState(`meter.${meter.alias}.consumptionAverage`, this.roundConsumption(meterState.consumption / dayInfo.daysSinceStartOfYear));\n            this.writeState(`meter.${meter.alias}.consumptionPredictedTotal`, this.roundConsumption(meterState.consumption / dayInfo.daysSinceStartOfYear * dayInfo.daysInYear));\n            totalConsumption += meterState.consumption;\n        }\n\n        return {\n            total: totalConsumption,\n            average: totalConsumption / dayInfo.daysSinceStartOfYear,\n            predicted: totalConsumption / dayInfo.daysSinceStartOfYear * dayInfo.daysInYear,\n        };\n    }\n\n    private calculateCosts(meterStates: MeterState[], dayInfo: DayInfo): number {\n\n        let usedCosts = 0;\n\n        const basePricePerDay = this.config.paymentBasePrice / dayInfo.daysInYear;\n        usedCosts += basePricePerDay * dayInfo.daysSinceStartOfYear;\n\n        for (const meterState of meterStates) {\n            const meter = meterState.meter;\n            this.writeState(`meter.${meter.alias}.costs`, this.roundCosts(meterState.consumption * meterState.meter.pricePerUnit));\n            usedCosts += meterState.consumption * meterState.meter.pricePerUnit;\n        }\n\n        return usedCosts;\n    }\n\n    private calculatePaid(dayInfo: DayInfo): number {\n\n        let paid = this.config.paymentCorrectionOffset;\n\n        const paymentPerDay = this.config.paymentValue * this.config.paymentCount / dayInfo.daysInYear;\n        paid += paymentPerDay * dayInfo.daysSinceStartOfYear;\n\n        return paid;\n    }\n\n    private calculateRecommendation(costs: number, dayInfo: DayInfo): number {\n        return this.roundCosts(costs / dayInfo.daysSinceStartOfYear * dayInfo.daysInYear / this.config.paymentCount);\n    }\n\n\n    public roundCosts(costs: number): number {\n        return Math.round(costs * 100) / 100;\n    }\n\n    public roundConsumption(consumption: number): number {\n        return Math.round(consumption * 1000) / 1000;\n    }\n\n    public getDaysInYear(): number {\n        return 365;\n    }\n\n    public getDaysSince(start: Date): number {\n        const now = new Date();\n        const diff = now.valueOf() - start.valueOf();\n        const oneDay = 1000 * 60 * 60 * 24;\n        return Math.floor(diff / oneDay);\n    }\n\n    private writeState(id: string, value: any): void {\n        this.addPendingPromise(this.setStateAsync(id, {val: value, ack: true}));\n    }\n\n    private async getMeterStates(): Promise<MeterState[]> {\n\n        const meterStates = [];\n\n        for (const meter of this.config.meters) {\n            meterStates.push(await this.getMeterState(meter));\n        }\n\n        return meterStates;\n    }\n\n    private getNumericStateValue(state: null|undefined|ioBroker.State, onErrorMessage: string): number {\n        const stateValue = state?.val;\n        if (typeof stateValue === 'number') {\n            return stateValue;\n        }\n        throw new Error(onErrorMessage);\n    }\n\n    private async getMeterState(meter: MeterDefinition): Promise<MeterState> {\n\n        const currentValue = this.getNumericStateValue(\n            await this.getForeignStateAsync(meter.objectId),\n            `Could not read meter \"${meter.alias}\" with id: ${meter.objectId}`\n        );\n        const startValue = this.getNumericStateValue(\n            await this.getStateAsync(`meter.${meter.alias}.startValue`),\n            `Could not read start value for meter \"${meter.alias}\".`\n        );\n\n        return {\n            meter,\n            currentValue,\n            startValue,\n            consumption: currentValue - startValue,\n        };\n    }\n\n    private getDayInfo(): DayInfo {\n\n        const firstDayOfYear = new Date((new Date()).getFullYear(), 0, 0);\n        const daysInYear = this.getDaysInYear();\n        const daysSinceStartOfYear = this.getDaysSince(firstDayOfYear);\n\n        return {firstDayOfYear, daysInYear, daysSinceStartOfYear};\n    }\n\n    private async assertObjectsExist(): Promise<void> {\n\n        for (const meter of this.config.meters) {\n\n            await this.setObjectNotExistsAsync(`meter.${meter.alias}.startValue`, {\n                type: 'state',\n                common: {\n                    name: 'Start value',\n                    type: 'number',\n                    role: 'state',\n                    read: true,\n                    write: true,\n                    unit: this.config.meterUnit,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`meter.${meter.alias}.consumptionAverage`, {\n                type: 'state',\n                common: {\n                    name: 'Average consumption in period',\n                    type: 'number',\n                    role: 'state',\n                    read: true,\n                    write: false,\n                    unit: this.config.meterUnit,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`meter.${meter.alias}.consumptionTotal`, {\n                type: 'state',\n                common: {\n                    name: 'Total consumption in period',\n                    type: 'number',\n                    role: 'state',\n                    read: true,\n                    write: false,\n                    unit: this.config.meterUnit,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`meter.${meter.alias}.consumptionPredicted`, {\n                type: 'state',\n                common: {\n                    name: 'Total predicted consumption in period',\n                    type: 'number',\n                    role: 'state',\n                    read: true,\n                    write: false,\n                    unit: this.config.meterUnit,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`meter.${meter.alias}.costs`, {\n                type: 'state',\n                common: {\n                    name: 'Total costs',\n                    type: 'number',\n                    role: 'state',\n                    read: true,\n                    write: false,\n                    unit: this.config.paymentUnit,\n                },\n                native: {},\n            });\n\n        }\n\n        await this.setObjectNotExistsAsync(`summary.consumptionTotal`, {\n            type: 'state',\n            common: {\n                name: 'Total consumption in period',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.meterUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.consumptionPredictedTotal`, {\n            type: 'state',\n            common: {\n                name: 'Total predicted consumption in period',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.meterUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.consumptionAverage`, {\n            type: 'state',\n            common: {\n                name: 'Average consumption in period',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.meterUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.paid`, {\n            type: 'state',\n            common: {\n                name: 'Total paid value',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.paymentUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.costs`, {\n            type: 'state',\n            common: {\n                name: 'Total costs',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.paymentUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.balance`, {\n            type: 'state',\n            common: {\n                name: 'Current balance',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.paymentUnit,\n            },\n            native: {},\n        });\n\n        await this.setObjectNotExistsAsync(`summary.recommendedPayment`, {\n            type: 'state',\n            common: {\n                name: 'Recommended payment per payment interval',\n                type: 'number',\n                role: 'state',\n                read: true,\n                write: false,\n                unit: this.config.paymentUnit,\n            },\n            native: {},\n        });\n    }\n\n    end(): void {\n        if (this.unloaded) return;\n        Promise.allSettled(this.pendingPromises).finally(() => {\n            if (this.stop) {\n                this.stop();\n            }\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        this.unloaded = true;\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MeterStatistics(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MeterStatistics())();\n}\n"],
  "mappings": "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",
  "names": []
}
